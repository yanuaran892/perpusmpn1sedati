-- Create admin_logs table
CREATE TABLE public.admin_logs (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  admin_id BIGINT REFERENCES public.admin(id) ON DELETE SET NULL, -- Optional: Link to admin table if needed
  admin_username TEXT NOT NULL,
  action_type TEXT NOT NULL, -- e.g., 'BOOK_ADDED', 'STUDENT_DELETED', 'LOGIN', 'BORROW_APPROVED'
  description TEXT NOT NULL,
  status TEXT NOT NULL, -- 'SUCCESS' or 'FAILED'
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Enable RLS (REQUIRED for security)
ALTER TABLE public.admin_logs ENABLE ROW LEVEL SECURITY;

-- Create policies for admin_logs table
-- Admins can only read logs
CREATE POLICY "Admins can view all admin logs" ON public.admin_logs
FOR SELECT TO authenticated USING (true);

-- Admins can insert logs (this would typically be done by backend functions or trusted client-side code)
CREATE POLICY "Admins can insert admin logs" ON public.admin_logs
FOR INSERT TO authenticated WITH CHECK (true);

-- No update or delete policies for logs to maintain audit trail integrity
-- (unless specific use cases require it, which is not the case here)